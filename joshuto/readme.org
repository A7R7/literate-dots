#+title: Joshuto Configuration
#+author: A7R7
#+language:en
#+AUTO_TANGLE: t

Joshuto is a ranger-like terminal file manager written in Rust.

* Basic
:PROPERTIES:
:header-args: toml :tangle joshuto.toml
:END:

This is for configuring how many items to reach before 'scrolling' the view
#+begin_src toml
scroll_offset = 6
#+end_src

If joshuto does not know how to open the file, it can resort to opening it via xdg settings
#+begin_src toml
xdg_open = true
#+end_src

Fork xdg_open so you can continue using joshuto with application open
#+begin_src toml
xdg_open_fork = true
#+end_src

Use system trash can instead of permanently removing files
#+begin_src toml
use_trash = true
#+end_src

 Watch for filesystem changes and update directory listings accordingly
#+begin_src toml
watch_files = true
#+end_src

If true the cursor will focus newly created files or directories with `:touch` or `:mkdir`
Even if true, the behavior can be avoided prefixing the new file/dir with "./"
E.g.:
- `:mkdir a` moves the cursor to the new directory `a`
- `:mkdir ./b` keeps the cursor where it was
#+begin_src toml
focus_on_create = true
#+end_src

#+begin_src toml
[display]
# default, hsplit
mode = "default"

automatically_count_files = false
collapse_preview = true
# ratios for parent view (optional), current view and preview
column_ratio = [1, 4, 4]
scroll_offset = 6
show_borders = true
show_hidden = false
show_icons = true
# none, absolute, relative
line_number_style = "none"

# size, mtime, user, gourp, perm. can be combined with |.
# `none` to disable, `all` to enable all
# all and none can't be combined with other options
linemode = "size"
#+end_src

#+begin_src toml
[display.sort]
# lexical, mtime, natural, size, ext
sort_method = "natural"
case_sensitive = false
directories_first = true
reverse = false
#+end_src

#+begin_src toml
[preview]
preview_script = "~/.config/joshuto/preview_file.sh"
preview_shown_hook_script = "~/.config/joshuto/on_preview_shown.sh"
preview_removed_hook_script = "~/.config/joshuto/on_preview_removed.sh"
#+end_src

#+begin_src toml
[search]
# insensitive, sensitive, smart
string_case_sensitivity = "insensitive"
# see above
glob_case_sensitivity = "sensitive"
# see above
regex_case_sensitivity = "sensitive"
# see above
fzf_case_sensitivity = "insensitive"
#+end_src

#+begin_src toml
[tab]
# inherit, home, root
home_page = "home"
#+end_src
* Keymap
:PROPERTIES:
:header-args: toml :tangle keymap.toml
:END:

#+begin_src toml
[default_view]
keymap = [
  { keys = ["escape"], commands = ["escape"] },
  { keys = ["ctrl+t"], commands = ["new_tab"] },
  { keys = ["alt+t"], commands = ["new_tab --cursor"] },
  { keys = ["T"], commands = ["new_tab --current"] },
  { keys = ["W"], commands = ["close_tab"] },
  { keys = ["ctrl+w"], commands = ["close_tab"] },
  { keys = ["q"], commands = ["close_tab"] },
  { keys = ["ctrl+c"], commands = ["quit"] },
  { keys = ["Q"], commands = ["quit --output-current-directory"] },

  { keys = ["R"], commands = ["reload_dirlist"] },
  { keys = ["z", "h"], commands = ["toggle_hidden"] },
  { keys = ["ctrl+h"], commands = ["toggle_hidden"] },
  { keys = ["\t"], commands = ["tab_switch 1"] },
  { keys = ["backtab"], commands = ["tab_switch -1"] },

  { keys = ["alt+1"], commands = ["tab_switch_index 1"] },
  { keys = ["alt+2"], commands = ["tab_switch_index 2"] },
  { keys = ["alt+3"], commands = ["tab_switch_index 3"] },
  { keys = ["alt+4"], commands = ["tab_switch_index 4"] },
  { keys = ["alt+5"], commands = ["tab_switch_index 5"] },

  { keys = ["1"], commands = ["numbered_command 1"] },
  { keys = ["2"], commands = ["numbered_command 2"] },
  { keys = ["3"], commands = ["numbered_command 3"] },
  { keys = ["4"], commands = ["numbered_command 4"] },
  { keys = ["5"], commands = ["numbered_command 5"] },
  { keys = ["6"], commands = ["numbered_command 6"] },
  { keys = ["7"], commands = ["numbered_command 7"] },
  { keys = ["8"], commands = ["numbered_command 8"] },
  { keys = ["9"], commands = ["numbered_command 9"] },

  # arrow keys
  { keys = ["arrow_up"], commands = ["cursor_move_up"] },
  { keys = ["arrow_down"], commands = ["cursor_move_down"] },
  { keys = ["arrow_left"], commands = ["cd .."] },
  { keys = ["arrow_right"], commands = ["open"] },
  { keys = ["\n"], commands = ["open"] },
  { keys = ["home"], commands = ["cursor_move_home"] },
  { keys = ["end"], commands = ["cursor_move_end"] },
  { keys = ["page_up"], commands = ["cursor_move_page_up"] },
  { keys = ["page_down"], commands = ["cursor_move_page_down"] },
  { keys = ["ctrl+u"], commands = ["cursor_move_page_up 0.5"] },
  { keys = ["ctrl+d"], commands = ["cursor_move_page_down 0.5"] },
  { keys = ["ctrl+b"], commands = ["cursor_move_page_up"] },
  { keys = ["ctrl+f"], commands = ["cursor_move_page_down"] },

  # my keybindings
  { keys = ["l"], commands = ["cursor_move_down"] },
  { keys = ["k"], commands = ["cursor_move_up"] },
  { keys = ["j"], commands = ["cd .."] },
  { keys = [";"], commands = ["open"] },
  { keys = ["h"], commands = ["cursor_move_home"] },
  { keys = ["'"], commands = ["cursor_move_end"] },
  { keys = ["r"], commands = ["open_with"] },

  { keys = ["J"], commands = ["cursor_move_page_home"] },
  { keys = ["L"], commands = ["cursor_move_page_middle"] },
  { keys = ["M"], commands = ["cursor_move_page_end"] },

  { keys = ["["], commands = ["parent_cursor_move_up"] },
  { keys = ["]"], commands = ["parent_cursor_move_down"] },

  { keys = ["c", "d"], commands = [":cd "] },
  { keys = ["d", "d"], commands = ["cut_files"] },
  { keys = ["y", "y"], commands = ["copy_files"] },
  { keys = ["y", "n"], commands = ["copy_filename"] },
  { keys = ["y", "."], commands = ["copy_filename_without_extension"] },
  { keys = ["y", "p"], commands = ["copy_filepath"] },
  { keys = ["y", "a"], commands = ["copy_filepath --all-selected=true"] },
  { keys = ["y", "d"], commands = ["copy_dirpath"] },

  { keys = ["p", "l"], commands = ["symlink_files --relative=false"] },
  { keys = ["p", "L"], commands = ["symlink_files --relative=true"] },

  { keys = ["delete"], commands = ["delete_files"] },
  { keys = ["d", "D"], commands = ["delete_files"] },

  { keys = ["p", "p"], commands = ["paste_files"] },
  { keys = ["p", "o"], commands = ["paste_files --overwrite=true"] },

  { keys = ["a"], commands = ["rename_append"] },
  { keys = ["A"], commands = ["rename_prepend"] },

  { keys = ["f", "t"], commands = [":touch "] },

  { keys = [" "], commands = ["select --toggle=true"] },
  { keys = ["t"], commands = ["select --all=true --toggle=true"] },
  { keys = ["V"], commands = ["toggle_visual"] },

  { keys = ["w"], commands = ["show_tasks --exit-key=w"] },
  { keys = ["b", "b"], commands = ["bulk_rename"] },
  { keys = ["="], commands = ["set_mode"] },

  { keys = [":"], commands = [":"] },

  # { keys = ["'"], commands = [":shell "] },
  { keys = ["m", "k"], commands = [":mkdir "] },
  { keys = ["c", "w"], commands = [":rename "] },

  { keys = ["/"], commands = [":search "] },
  { keys = ["|"], commands = [":search_inc "] },
  { keys = ["\\"], commands = [":search_glob "] },
  { keys = ["S"], commands = ["search_fzf"] },
  { keys = ["C"], commands = ["subdir_fzf"] },

  { keys = ["n"], commands = ["search_next"] },
  { keys = ["N"], commands = ["search_prev"] },

  { keys = ["s", "r"], commands = ["sort reverse"] },
  { keys = ["s", "l"], commands = ["sort lexical"] },
  { keys = ["s", "m"], commands = ["sort mtime"] },
  { keys = ["s", "n"], commands = ["sort natural"] },
  { keys = ["s", "s"], commands = ["sort size"] },
  { keys = ["s", "e"], commands = ["sort ext"] },

  { keys = ["m", "s"], commands = ["linemode size"] },
  { keys = ["m", "m"], commands = ["linemode mtime"] },
  { keys = ["m", "M"], commands = ["linemode size | mtime"] },
  { keys = ["m", "u"], commands = ["linemode user"] },
  { keys = ["m", "U"], commands = ["linemode user | group"] },
  { keys = ["m", "p"], commands = ["linemode perm"] },

  { keys = ["g", "r"], commands = ["cd /"] },
  { keys = ["g", "c"], commands = ["cd ~/.config"] },
  { keys = ["g", "d"], commands = ["cd ~/Downloads"] },
  { keys = ["g", "e"], commands = ["cd /etc"] },
  { keys = ["g", "h"], commands = ["cd ~/"] },
  { keys = ["?"], commands = ["help"] },
]
#+end_src

#+begin_src toml :tangle keymap.toml
[task_view]

keymap = [
  # arrow keys
  { keys = ["arrow_up"], commands = ["cursor_move_up"] },
  { keys = ["arrow_down"], commands = ["cursor_move_down"] },
  { keys = ["home"], commands = ["cursor_move_home"] },
  { keys = ["end"], commands = ["cursor_move_end"] },

  # my keybindings
  { keys = ["l"], commands = ["cursor_move_down"] },
  { keys = ["k"], commands = ["cursor_move_up"] },
  { keys = ["g", "g"], commands = ["cursor_move_home"] },
  { keys = ["G"], commands = ["cursor_move_end"] },

  { keys = ["w"], commands = ["show_tasks"] },
  { keys = ["escape"], commands = ["show_tasks"] },
]

#+end_src

#+begin_src toml :tangle keymap.toml
[help_view]

keymap = [
  # arrow keys
  { keys = ["arrow_up"], commands = ["cursor_move_up"] },
  { keys = ["arrow_down"], commands = ["cursor_move_down"] },
  { keys = ["home"], commands = ["cursor_move_home"] },
  { keys = ["end"], commands = ["cursor_move_end"] },

  # vim-like keybindings
  { keys = ["l"], commands = ["cursor_move_down"] },
  { keys = ["k"], commands = ["cursor_move_up"] },
  { keys = ["g", "g"], commands = ["cursor_move_home"] },
  { keys = ["G"], commands = ["cursor_move_end"] },

  { keys = ["w"], commands = ["show_tasks"] },
  { keys = ["escape"], commands = ["show_tasks"] },
]
#+end_src

* mimetype
empty
* Theme
empty
* Icons
empty
* File preview
This script is a template script for creating textual file previews in Joshuto.
Copy this script to your Joshuto configuration directory and refer to this script in `joshuto.toml` in the `[preview]` section like

```
preview_script = "~/.config/joshuto/preview_file.sh"
```
Make sure the file is marked as executable:
```sh
chmod +x ~/.config/joshuto/preview_file.sh
```
Joshuto will call this script for each file when first hovered by the cursor. If this script returns with an exit code 0, the stdout of this script will be the file's preview text in Joshuto's right panel. The preview text will be cached by Joshuto and only renewed on reload. ANSI color codes are supported if Joshuto is build with the `syntax_highlight` feature.

#+begin_src bash :tangle preview_file.sh
#!/usr/bin/env bash

## This script is considered a configuration file and must be updated manually.
## It will be left untouched if you upgrade Joshuto.
##
## Meanings of exit codes:
##
## code | meaning    | action of ranger
## -----+------------+-------------------------------------------
## 0    | success    | Display stdout as preview
## 1    | no preview | Display no preview at all
##
## This script is used only as a provider for textual previews.
## Image previews are independent from this script.

IFS=$'\n'

# Security measures:
# * noclobber prevents you from overwriting a file with `>`
# * noglob prevents expansion of wild cards
# * nounset causes bash to fail if an undeclared variable is used (e.g. typos)
# * pipefail causes a pipeline to fail also if a command other than the last one fails
set -o noclobber -o noglob -o nounset -o pipefail

FILE_PATH=""
PREVIEW_WIDTH=10
PREVIEW_HEIGHT=10

while [ "$#" -gt 0 ]; do
    case "$1" in
        "--path")
            shift
            FILE_PATH="$1"
            ;;
        "--preview-width")
            shift
            PREVIEW_WIDTH="$1"
            ;;
        "--preview-height")
            shift
            PREVIEW_HEIGHT="$1"
            ;;
    esac
    shift
done

handle_extension() {
    case "${FILE_EXTENSION_LOWER}" in
            ## Archive
            a|ace|alz|arc|arj|bz|bz2|cab|cpio|deb|gz|jar|lha|lz|lzh|lzma|lzo|\
            rpm|rz|t7z|tar|tbz|tbz2|tgz|tlz|txz|tZ|tzo|war|xpi|xz|Z|zip)
            atool --list -- "${FILE_PATH}" && exit 0
            bsdtar --list --file "${FILE_PATH}" && exit 0
            exit 1 ;;
        rar)
            ## Avoid password prompt by providing empty password
            unrar lt -p- -- "${FILE_PATH}" && exit 0
            exit 1 ;;
        7z)
            ## Avoid password prompt by providing empty password
            7z l -p -- "${FILE_PATH}" && exit 0
            exit 1 ;;

            ## PDF
        pdf)
            ## Preview as text conversion
            pdftotext -l 10 -nopgbrk -q -- "${FILE_PATH}" - | \
                fmt -w "${PREVIEW_WIDTH}" && exit 0
            mutool draw -F txt -i -- "${FILE_PATH}" 1-10 | \
                fmt -w "${PREVIEW_WIDTH}" && exit 0
            exiftool "${FILE_PATH}" && exit 0
            exit 1 ;;

            ## BitTorrent
        torrent)
            transmission-show -- "${FILE_PATH}" && exit 0
            exit 1 ;;

            ## OpenDocument
        odt|sxw)
            ## Preview as text conversion
            odt2txt "${FILE_PATH}" && exit 0
            ## Preview as markdown conversion
            pandoc -s -t markdown -- "${FILE_PATH}" && exit 0
            exit 1 ;;
        ods|odp)
            ## Preview as text conversion (unsupported by pandoc for markdown)
            odt2txt "${FILE_PATH}" && exit 0
            exit 1 ;;

            ## XLSX
        xlsx)
            ## Preview as csv conversion
            ## Uses: https://github.com/dilshod/xlsx2csv
            xlsx2csv -- "${FILE_PATH}" && exit 0
            exit 1 ;;

            ## HTML
        htm|html|xhtml)
            ## Preview as text conversion
            w3m -dump "${FILE_PATH}" && exit 0
            lynx -dump -- "${FILE_PATH}" && exit 0
            elinks -dump "${FILE_PATH}" && exit 0
            pandoc -s -t markdown -- "${FILE_PATH}" && exit 0
            ;;

            ## JSON
        json|ipynb)
            jq --color-output . "${FILE_PATH}" && exit 0
            python -m json.tool -- "${FILE_PATH}" && exit 0
            ;;

            ## Direct Stream Digital/Transfer (DSDIFF) and wavpack aren't detected
            ## by file(1).
        dff|dsf|wv|wvc)
            mediainfo "${FILE_PATH}" && exit 0
            exiftool "${FILE_PATH}" && exit 0
            ;; # Continue with next handler on failure
    esac
}

handle_mime() {
    local mimetype="${1}"

    case "${mimetype}" in
            ## RTF and DOC
        text/rtf|*msword)
            ## Preview as text conversion
            ## note: catdoc does not always work for .doc files
            ## catdoc: http://www.wagner.pp.ru/~vitus/software/catdoc/
            catdoc -- "${FILE_PATH}" && exit 0
            exit 1 ;;

            ## DOCX, ePub, FB2 (using markdown)
            ## You might want to remove "|epub" and/or "|fb2" below if you have
            ## uncommented other methods to preview those formats
        *wordprocessingml.document|*/epub+zip|*/x-fictionbook+xml)
            ## Preview as markdown conversion
            pandoc -s -t markdown -- "${FILE_PATH}" | bat -l markdown \
                --color=always --paging=never \
                --style=plain \
                --terminal-width="${PREVIEW_WIDTH}" && exit 0
            exit 1 ;;

            ## E-mails
        message/rfc822)
            ## Parsing performed by mu: https://github.com/djcb/mu
            mu view -- "${FILE_PATH}" && exit 0
            exit 1 ;;

            ## XLS
        *ms-excel)
            ## Preview as csv conversion
            ## xls2csv comes with catdoc:
            ##   http://www.wagner.pp.ru/~vitus/software/catdoc/
            xls2csv -- "${FILE_PATH}" && exit 0
            exit 1 ;;

            ## Text
        text/* | */xml)
            bat --color=always --paging=never \
                --style=plain \
                --terminal-width="${PREVIEW_WIDTH}" \
                "${FILE_PATH}" && exit 0
            cat "${FILE_PATH}" && exit 0
            exit 1 ;;

            ## DjVu
        image/vnd.djvu)
            ## Preview as text conversion (requires djvulibre)
            djvutxt "${FILE_PATH}" | fmt -w "${PREVIEW_WIDTH}" && exit 0
            exiftool "${FILE_PATH}" && exit 0
            exit 1 ;;

            ## Image
        image/*)
            ## Preview as text conversion
            exiftool "${FILE_PATH}" && exit 0
            exit 1 ;;

            ## Video and audio
        video/* | audio/*)
            mediainfo "${FILE_PATH}" && exit 0
            exiftool "${FILE_PATH}" && exit 0
            exit 1 ;;
    esac
}

FILE_EXTENSION="${FILE_PATH##*.}"
FILE_EXTENSION_LOWER="$(printf "%s" "${FILE_EXTENSION}" | tr '[:upper:]' '[:lower:]')"
handle_extension
MIMETYPE="$( file --dereference --brief --mime-type -- "${FILE_PATH}" )"
handle_mime "${MIMETYPE}"

exit 1
#+end_src

* Kitty image preview

+ Use icat to place an image on top of joshuto's preview window. If any images already exist, they will be cleared before showing the image.

#+begin_src bash :tangle on_preview_shown.sh
#!/usr/bin/env bash

FILE_PATH="$1"			# Full path of the previewed file
PREVIEW_X_COORD="$2"		# x coordinate of upper left cell of preview area
PREVIEW_Y_COORD="$3"		# y coordinate of upper left cell of preview area
PREVIEW_WIDTH="$4"		# Width of the preview pane (number of fitting characters)
PREVIEW_HEIGHT="$5"		# Height of the preview pane (number of fitting characters)

TMP_FILE="$HOME/.cache/joshuto/thumbcache.png"

mimetype=$(file --mime-type -Lb "$FILE_PATH")

function image {
	kitty +kitten icat \
		--transfer-mode=file \
		--clear 2>/dev/null
	kitty +kitten icat \
		--transfer-mode=file \
		--place "${PREVIEW_WIDTH}x${PREVIEW_HEIGHT}@${PREVIEW_X_COORD}x${PREVIEW_Y_COORD}" \
		"$1" 2>/dev/null
}

function video {
    ffmpegthumbnailer -i "$1" -o "${TMP_FILE}" -s 0 2>/dev/null
    image "${TMP_FILE}"
}

case "$mimetype" in
	image/*)
		image "${FILE_PATH}"
		;;
	*)
	video/*)
		video "${FILE_PATH}"
		;;
	*)
		kitty +kitten icat \
			--transfer-mode=file \
			--clear 2>/dev/null
		;;
esac
#+end_src

+ clears any existing images on the screen.
#+begin_src bash :tangle on_preview_removed.sh
#!/usr/bin/env bash

kitty +kitten icat \
	--transfer-mode=file \
	--clear 2>/dev/null
#+end_src
